{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset134 PingFangSC-Regular;\f2\fmodern\fcharset0 CourierNewPSMT;
}
{\colortbl;\red255\green255\blue255;\red100\green56\blue32;\red196\green26\blue22;\red0\green0\blue0;
\red170\green13\blue145;\red28\green0\blue207;\red0\green116\blue0;\red92\green38\blue153;\red63\green110\blue116;
\red38\green71\blue75;\red46\green13\blue110;}
{\*\expandedcolortbl;;\csgenericrgb\c39100\c22000\c12500;\csgenericrgb\c77000\c10200\c8600;\csgenericrgb\c0\c0\c0;
\csgenericrgb\c66500\c5200\c56900;\csgenericrgb\c11000\c0\c81000;\csgenericrgb\c0\c45600\c0;\csgenericrgb\c35900\c14900\c60100;\csgenericrgb\c24700\c43100\c45600;
\csgenericrgb\c14900\c27800\c29400;\csgenericrgb\c18100\c5200\c43100;}
\paperw11900\paperh16840\margl1440\margr1440\vieww28600\viewh15300\viewkind0
\deftab543
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0

\f0\fs22 \cf2 \CocoaLigature0 \

\f1\fs72 \'cd\'d8\'d5\'b9
\f0 kmp
\fs22 \
\
#include \cf3 <bits/stdc++.h>\cf2 \
\cf4 \
\cf5 using\cf4  \cf5 namespace\cf4  std;\
\cf5 const\cf4  \cf5 int\cf4  maxn = \cf6 100000\cf4  + \cf6 10\cf4 ;\
\cf5 char\cf4  s1[maxn], s2[maxn];\
\cf5 int\cf4  nxt[maxn], extend[maxn];\
\cf7 //
\f1 \'ca\'b9\'d3\'c3\'d7\'a2\'d2\'e2\'a3\'ba
\f0 nxt
\f1 \'b4\'f3\'d0\'a1\'ce\'aa\'d7\'d3\'b4\'ae\'b5\'c4\'b3\'a4\'b6\'c8\'a3\'ac
\f0 extend
\f1 \'b3\'a4\'b6\'c8\'ce\'aa\'d6\'f7\'b4\'ae\'b5\'c4\'b3\'a4\'b6\'c8
\f0 \cf4 \
\cf7 //
\f1 \'ca\'b1\'bc\'e4\'b8\'b4\'d4\'d3\'b6\'c8
\f0 :O(n+m)\cf4 \
\cf7 //
\f1 \'c7\'f3\'bd\'e2
\f0  T 
\f1 \'d6\'d0
\f0  nxt[]\cf4 \
\cf5 void\cf4  Getnxt(\cf5 char\cf4  T[], \cf5 int\cf4  m, \cf5 int\cf4  nxt[])\
\{\
    \cf5 int\cf4  a = \cf6 0\cf4 , p = \cf6 0\cf4 ;\
    nxt[\cf6 0\cf4 ] = m;\
\
    \cf5 for\cf4  (\cf5 int\cf4  i = \cf6 1\cf4 ; i < m; i++) \{\
        \cf5 if\cf4  (i >= p || i + nxt[i - a] >= p) \{\
            \cf5 if\cf4  (i >= p)\
                p = i;\
\
            \cf5 while\cf4  (p < m && T[p] == T[p - i])\
                p++;\
\
            nxt[i] = p - i;\
            a = i;\
        \} \cf5 else\cf4 \
            nxt[i] = nxt[i - a];\
    \}\
\}\
\
\cf7 //
\f1 \'c7\'f3\'bd\'e2
\f0  extend[]\cf4 \
\cf5 void\cf4  GetExtend(\cf5 char\cf4  S[], \cf5 int\cf4  n, \cf5 char\cf4  T[], \cf5 int\cf4  m, \cf5 int\cf4  extend[], \cf5 int\cf4  nxt[])\
\{\
    \cf5 int\cf4  a = \cf6 0\cf4 , p = \cf6 0\cf4 ;\
    Getnxt(T, m, nxt);\
\
    \cf5 for\cf4  (\cf5 int\cf4  i = \cf6 0\cf4 ; i < n; i++) \{\
        \cf5 if\cf4  (i >= p || i + nxt[i - a] >= p) \{\
            \cf5 if\cf4  (i >= p)\
                p = i;\
            \cf5 while\cf4  (p < n && p - i < m && S[p] == T[p - i])\
                p++;\
            extend[i] = p - i;\
            a = i;\
        \} \cf5 else\cf4 \
            extend[i] = nxt[i - a];\
    \}\
\}\
\
\cf5 int\cf4  main()\
\{\
    freopen(\cf3 "in.txt"\cf4 ,\cf3 "r"\cf4 ,stdin);\
    \cf5 while\cf4 (scanf(\cf3 "%s%s"\cf4 ,s1,s2)!=EOF) \{\
        \cf5 int\cf4  len1=(\cf5 int\cf4 )strlen(s1);\
        \cf5 int\cf4  len2=(\cf5 int\cf4 )strlen(s2);\
        GetExtend(s1, len1, s2, len2, extend, nxt);\
        \cf5 int\cf4  ans=\cf6 0\cf4 ;\
        \cf5 for\cf4 (\cf5 int\cf4  i=\cf6 0\cf4 ;i<len1;i++) cout<<extend[i]<<\cf6 ' '\cf4 ;\
        cout<<endl;\
        \cf5 for\cf4 (\cf5 int\cf4  i=\cf6 0\cf4 ;i<len1;i++) \cf5 if\cf4 (ans<extend[i]) ans=extend[i];\
        printf(\cf3 "%d\\n"\cf4 ,ans);\
    \}\
    \cf5 return\cf4  \cf6 0\cf4 ;\
\}\
\

\fs72 kmp\
\
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0

\f2\fs20 \cf2 #include \cf3 <bits/stdc++.h>\cf2 \
\cf5 using\cf4  \cf5 namespace\cf4  \cf8 std\cf4 ;\
\cf5 const\cf4  \cf5 int\cf4  maxn=\cf6 100000\cf4 +\cf6 100\cf4 ;\
\cf5 char\cf4  s[\cf9 maxn\cf4 *\cf6 2\cf4 ];\
\cf5 int\cf4  nxt[\cf9 maxn\cf4 ];\
\cf5 char\cf4  s1[\cf9 maxn\cf4 ];\
\cf5 char\cf4  s2[\cf9 maxn\cf4 ];\
//next[]
\f1 \'b5\'c4\'ba\'ac\'d2\'e5\'a3\'ba
\f2 x[i-next[i]...i-1]=x[0...next[i]-1]\
//next[i]
\f1 \'ce\'aa\'c2\'fa\'d7\'e3
\f2 x[i-z...i-1]=x[0...z-1]
\f1 \'b5\'c4\'d7\'ee\'b4\'f3
\f2 z
\f1 \'d6\'b5\'a3\'a8\'be\'cd\'ca\'c7
\f2 x
\f1 \'b5\'c4\'d7\'d4\'c9\'ed\'c6\'a5\'c5\'e4\'a3\'a9
\f2 \
 \
\cf7 //
\f1 \'b5\'b1\'ce\'bb\'d6\'c3
\f2 i!=
\f1 \'ce\'bb\'d6\'c3
\f2 j
\f1 \'a3\'ac
\f2 nxt[]
\f1 \'d6\'b8\'cf\'f2\'b5\'c4\'ca\'c7\'d2\'bb\'b8\'f6\'ce\'bb\'d6\'c3
\f2 k=nxt[j]\cf4 \
\cf7 //
\f1 \'ce\'bb\'d6\'c3
\f2 k
\f1 \'ca\'c7\'b2\'bb\'ca\'c7\'ba\'cd
\f2 i
\f1 \'cf\'e0\'b5\'c8
\f2 ,
\f1 \'b2\'bb\'d6\'aa\'b5\'c0\'a3\'ac\'b5\'ab\'ca\'c7\'ce\'bb\'d6\'c3
\f2 i
\f1 \'b5\'c4\'c7\'b0\'c3\'e6\'d2\'bb\'b6\'a8\'b5\'c8\'d2\'bb\'ce\'bb\'d6\'c3
\f2 k
\f1 \'b5\'c4\'c7\'b0\'c3\'e6\'b5\'bd\'bf\'aa\'ca\'bc\'b5\'c4\'d7\'d6\'b7\'fb\'a3\'ac\'c7\'b0\'d7\'ba\'cb\'bc\'cf\'eb
\f2 \cf4 \
\cf7 //
\f1 \'cd\'ac\'ca\'b1
\f2 nxt[0]=-1
\f1 \'a3\'ac
\f2 nxt
\f1 \'cf\'c2\'b1\'ea\'b4\'d3
\f2 1
\f1 \'bf\'aa\'ca\'bc\'a3\'ac\'b6\'d4\'d3\'a6\'c4\'a3\'ca\'bd\'b4\'ae\'cf\'c2\'b1\'ea\'b4\'d3
\f2 0
\f1 \'bf\'aa\'ca\'bc
\f2 \cf4 \
\cf5 void\cf4  init(\cf5 char\cf4  x[], \cf5 int\cf4  m, \cf5 int\cf4  nxt[]) \{\
    \cf5 int\cf4  i, j;\
    j = nxt[\cf6 0\cf4 ] = -\cf6 1\cf4 ;\
    i = \cf6 0\cf4 ;\
    \cf5 while\cf4  (i < m) \{\
        \cf5 while\cf4  (-\cf6 1\cf4  != j && x[i] != x[j])\
            j = nxt[j];\
        nxt[++i] = ++j;\
    \}\
\}\
\cf7 /*\
 * kmpnxt[]
\f1 \'b5\'c4\'d2\'e2\'cb\'bc\'a3\'ba
\f2 nxt'[i]=nxt[nxt[...[nxt[i]]]] (
\f1 \'d6\'b1\'b5\'bd
\f2 nxt'[i]<0
\f1 \'bb\'f2\'d5\'df
\f2 \
 x[nxt'[i]]!=x[i])\
 * 
\f1 \'d5\'e2\'d1\'f9\'b5\'c4\'d4\'a4\'b4\'a6\'c0\'ed\'bf\'c9\'d2\'d4\'bf\'ec\'d2\'bb\'d0\'a9
\f2 \
 */\cf4 \
\cf5 void\cf4  init2(\cf5 char\cf4  x[], \cf5 int\cf4  m, \cf5 int\cf4  kmpnxt[]) \{\
    \cf5 int\cf4  i, j;\
    j = kmpnxt[\cf6 0\cf4 ] = -\cf6 1\cf4 ;\
    i = \cf6 0\cf4 ;\
    \cf5 while\cf4  (i < m) \{\
        \cf5 while\cf4  (-\cf6 1\cf4  != j && x[i] != x[j])\
            j = kmpnxt[j];\
        \cf5 if\cf4  (x[++i] == x[++j])\
            kmpnxt[i] = kmpnxt[j];\
        \cf5 else\cf4 \
            kmpnxt[i] = j;\
    \}\
\}\
\cf7 /*\
 * 
\f1 \'b7\'b5\'bb\'d8
\f2 x
\f1 \'d4\'da
\f2 y
\f1 \'d6\'d0\'b3\'f6\'cf\'d6\'b5\'c4\'b4\'ce\'ca\'fd\'a3\'ac\'bf\'c9\'d2\'d4\'d6\'d8\'b5\'fe
\f2 \
 */\cf4 \
\cf5 inline\cf4  \cf5 bool\cf4  kmp(\cf5 char\cf4  x[], \cf5 int\cf4  m, \cf5 char\cf4  y[], \cf5 int\cf4  n) \{ \cf7 // x
\f1 \'ca\'c7\'c4\'a3\'ca\'bd\'b4\'ae\'a3\'ac
\f2 y
\f1 \'ca\'c7\'d6\'f7\'b4\'ae
\f2 \cf4 \
    \cf5 int\cf4  i, j;\
    \cf5 int\cf4  ans = \cf6 0\cf4 ;\
    \cf7 // init2(x,m,nxt);\cf4 \
    \cf10 init\cf4 (x, m, \cf9 nxt\cf4 );\
    i = j = \cf6 0\cf4 ;\
    \cf5 while\cf4  (i < n) \{\
        \cf5 while\cf4  (-\cf6 1\cf4  != j && y[i] != x[j])\
            j = \cf9 nxt\cf4 [j];\
        i++;\
        j++;\
        \cf5 if\cf4  (j >= m) \{\
            \cf5 return\cf4  \cf5 true\cf4 ;\
        \}\
    \}\
    \cf5 return\cf4  \cf5 false\cf4 ;\
\}\
\
\cf5 int\cf4  main() \{\
    \cf11 scanf\cf4 (\cf3 "%s"\cf4 ,\cf9 s\cf4 );\
    \cf5 int\cf4  len =(\cf5 int\cf4  )\cf11 strlen\cf4 (\cf9 s\cf4 );\
    \cf10 init2\cf4 (\cf9 s\cf4 ,len,\cf9 nxt\cf4 );\
    \cf5 for\cf4 (\cf5 int\cf4  i=\cf6 0\cf4 ;i<=len;i++) \{\
        \cf11 printf\cf4 (\cf3 "i: %d val: %d\\n"\cf4 ,i,\cf9 nxt\cf4 [i]);\
    \}\
    \cf5 return\cf4  \cf6 0\cf4 ;\
\}\

\f1\fs72 \'d4\'cb\'d3\'c3
\f2 kmp
\f1 \'b5\'c4next\'d1\'b0\'d5\'d2\'d1\'ad\'bb\'b7\'bd\'da
\f2\fs20 \
\
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0

\f0\fs22 \cf2 #include \cf3 <bits/stdc++.h>\cf2 \
\cf5 using\cf4  \cf5 namespace\cf4  \cf8 std\cf4 ;\
\cf5 const\cf4  \cf5 int\cf4  maxn=\cf6 1000000\cf4 +\cf6 100\cf4 ;\
\cf5 char\cf4  s[\cf9 maxn\cf4 ];\
\cf5 int\cf4  nxt[\cf9 maxn\cf4 ];\
\
\cf5 void\cf4  init(\cf5 char\cf4  x[], \cf5 int\cf4  m, \cf5 int\cf4  nxt[]) \{\
    \cf5 int\cf4  i, j;\
    j = nxt[\cf6 0\cf4 ] = -\cf6 1\cf4 ;\
    i = \cf6 0\cf4 ;\
    \cf5 while\cf4  (i < m) \{\
        \cf5 while\cf4  (-\cf6 1\cf4  != j && x[i] != x[j])\
            j = nxt[j];\
        nxt[++i] = ++j;\
    \}\
\}\
\
\cf5 int\cf4  main() \{\
    \cf5 while\cf4 (\cf11 scanf\cf4 (\cf3 "%s"\cf4 ,\cf9 s\cf4 )!=\cf2 EOF\cf4 ) \{\
        \cf5 int\cf4  len=\cf11 strlen\cf4 (\cf9 s\cf4 );\
        \cf10 init\cf4 (\cf9 s\cf4 ,len,\cf9 nxt\cf4 );\
        \cf5 for\cf4 (\cf5 int\cf4  i=\cf6 2\cf4 ;i<=len;i++) \{\
            \cf5 if\cf4 ((i%(i-\cf9 nxt\cf4 [i])==\cf6 0\cf4 )&&\cf9 nxt\cf4 [i]!=\cf6 0\cf4 ) \{\
                \cf11 printf\cf4 (\cf3 "%d\\n"\cf4 ,i/\cf6 2\cf4 );\
                \cf5 break\cf4 ;\
            \}\
        \}\
    \}\
    \cf5 return\cf4  \cf6 0\cf4 ;\
\}\
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0

\f2\fs20 \cf4 \
}